name: Terraform CI/CD

on:
  push:
    branches:
      - main # Trigger plan on push to main
    paths:
      - 'terraform/**' # Only run if changes in the terraform directory
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_WORKING_DIR: ./terraform # Set your Terraform root directory

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsTerraformRole # REPLACE with your IAM Role ARN
          aws-region: ap-south-1 
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x # Specify your desired Terraform version

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=my-terraform-state-bucket" -backend-config="key=path/to/my/state/terraform.tfstate" -backend-config="region=ap-south-1" # REPLACE with your S3 bucket/key/region
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true # Allow subsequent steps to run even if format check fails

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        # IMPORTANT: Output the plan to a file for the 'apply' job to use
        run: terraform plan -no-color -input=false -out=tfplan 
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          # If you have specific variables, you can pass them here
          # TF_VAR_example_variable: ${{ secrets.EXAMPLE_SECRET }}
          TF_VAR_region: ap-south-1

      - name: Store Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          # Path to the plan file created in the previous step
          path: ${{ env.TF_WORKING_DIR }}/tfplan 
          if-no-files-found: ignore

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform_plan # This job depends on the plan job succeeding
    # Only run apply if explicitly triggered with 'apply' action, or on push to main (after plan)
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && success())

    environment: production # Use a protected environment for production deployments
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsTerraformRole # REPLACE with your IAM Role ARN
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=my-terraform-state-bucket" -backend-config="key=path/to/my/state/terraform.tfstate" -backend-config="region=ap-south-1" # REPLACE with your S3 bucket/key/region
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        # Apply using the downloaded plan file
        run: terraform apply -auto-approve tfplan 
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_region: ap-south-1

  terraform_destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    # This job should ONLY be triggered manually for safety
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy'

    environment: production # Use a protected environment for destruction
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsTerraformRole # REPLACE with your IAM Role ARN
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x

      - name: Terraform Init
        run: terraform init -backend-config="bucket=my-terraform-state-bucket" -backend-config="key=path/to/my/state/terraform.tfstate" -backend-config="region=ap-south-1" # REPLACE with your S3 bucket/key/region
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Destroy
        run: |
          echo "WARNING: This is a destructive action. Proceeding with destroy..."
          terraform destroy -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_region: ap-south-1
