name: Terraform CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        working-directory: ./cicdtf
        run: terraform init
        shell: bash
        env:
          AWS_REGION: ap-south-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        working-directory: ./cicdtf
        run: terraform plan -out=tfplan
        shell: bash
        env:
          AWS_REGION: ap-south-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Optimization Tip: If your Terraform configuration is very large,
        # consider breaking it down into smaller, focused modules.
        # This can reduce the time it takes for Terraform to build the dependency graph.
        # Also, excessive use of data sources that query AWS APIs can slow down planning.

      - name: Terraform Apply
        working-directory: ./cicdtf
        run: terraform apply -auto-approve tfplan
        shell: bash
        env:
          AWS_REGION: ap-south-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Optimization Tip: For production, consider removing -auto-approve
        # and implementing a manual approval step or a separate manual workflow_dispatch for apply.
        # This provides a safety gate before applying changes to critical infrastructure.
