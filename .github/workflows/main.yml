name: Terraform CI/CD

on:
  # Allows you to run this workflow manually from the Actions tab in GitHub.
  workflow_dispatch:

  # This will now trigger both the 'terraform' (plan) and 'apply' jobs on every push to the main branch.
  # For production, consider removing 'push' trigger for 'apply' job and using manual approval steps.
  push:
    branches:
      - main

env:
  # AWS credentials are loaded from GitHub Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  # This job will perform Terraform initialization, validation, and planning.
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: cicdtf # Your Terraform files are here

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify AWS Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:+set}"
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:+set}"
          echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:+set}"
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::Missing AWS credentials."
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        # Initializes Terraform, configuring the backend for state management
        # Note: If you have a `backend` block directly in main.tf, the -backend-config is redundant
        # If your backend config is solely in main.tf, you can simplify this to: `terraform init`
        run: terraform init

      - name: Terraform Validate
        # Validates the Terraform configuration files
        run: terraform validate

      - name: Terraform Plan
        # Generates an execution plan and saves it to 'planfile'.
        # The 'public_key' variable is passed directly using -var.
        run: terraform plan -out=planfile -var="public_key=${{ secrets.TF_PUBLIC_KEY_CONTENT }}"

      - name: Upload Planfile and Lock File
        # Uploads both the generated planfile and the .terraform.lock.hcl file
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: terraform-artifacts-${{ github.run_id }} # Unique name for the artifact bundle
          path: |
            cicdtf/planfile
            cicdtf/.terraform.lock.hcl # Include the lock file
          retention-days: 1 # Retain artifact for 1 day

  # This job will now automatically apply the Terraform plan on 'push' to 'main'
  apply:
    needs: terraform # Ensures 'apply' runs only after 'terraform' job completes successfully
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Download Planfile and Lock File
        # Downloads both the planfile and the .terraform.lock.hcl file
        uses: actions/download-artifact@v4
        with:
          name: terraform-artifacts-${{ github.run_id }} # Use the same artifact name
          path: cicdtf # Download to the working directory

      - name: Terraform Init (in Apply Job)
        # Re-initializes Terraform in the apply job to ensure consistency with the downloaded lock file.
        # -reconfigure forces Terraform to forget any previous configuration and re-read it.
        # As with the plan job, if backend is in main.tf, `terraform init` is sufficient.
        run: terraform init -reconfigure

      - name: Terraform Apply
        # Applies the infrastructure changes based on the downloaded planfile.
        # The 'public_key' variable is passed directly using -var.
        run: terraform apply -input=false -var="public_key=${{ secrets.TF_PUBLIC_KEY_CONTENT }}" planfile
