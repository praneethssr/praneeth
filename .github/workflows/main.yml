name: Terraform CI

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      public_key:
        description: 'SSH Public Key for EC2 Key Pair (e.g., ssh-rsa AAAA...)'
        required: true
        type: string
  push:
    branches:
      - main # Triggers on pushes to the 'main' branch

env:
  # CRITICAL: These secret names MUST EXACTLY MATCH the names you have configured
  # in your GitHub repository's Settings -> Secrets and variables -> Actions.
  # For example, if your secret is named 'MY_AWS_ACCESS_KEY_ID', then use ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # <--- VERIFY THIS NAME IN GITHUB SECRETS
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # <--- VERIFY THIS NAME IN GITHUB SECRETS
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  terraform:
    runs-on: ubuntu-latest # Specifies the runner environment
    defaults:
      run:
        shell: bash # Uses bash for all run commands in this job
        # CRITICAL: This 'working-directory' MUST match your repository structure.
        # Based on your previous screenshot, your Terraform files are in 'cicdtf'.
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository code into the runner's workspace

      # DEBUGGING STEP: Show current working directory (initial)
      - name: Show current working directory (initial)
        run: pwd

      # DEBUGGING STEP: List repository root contents
      - name: List repository root contents
        run: ls -la ${{ github.workspace }}

      # DEBUGGING STEP: Verify AWS Environment Variables are set
      # This step is crucial for diagnosing the secret issue.
      # It will confirm if the variables are present in the shell environment (without printing values).
      - name: Verify AWS Environment Variables
        run: |
          echo "Checking AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:+set}"
          echo "Checking AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:+set}"
          echo "Checking AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:+set}"
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY is not set. Please check your GitHub Secrets."
            exit 1 # Exit the job if secrets are not found
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 # Sets up Terraform CLI on the runner
        with:
          terraform_version: 1.5.7 # Specifies the Terraform version to use

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (now 'cicdtf')
      - name: List working directory contents (inside cicdtf)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend and modules.
        # -backend-config="tfstate.config": Uses the specified file for backend configuration.
        # -migrate-state: Migrates state if the backend configuration changes.
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Validate
        # Validates the Terraform configuration files for syntax and consistency.
        # Pass the public_key as a variable for validation.
        run: terraform validate -var="public_key=${{ github.event.inputs.public_key }}"

      - name: Terraform Plan
        # Generates an execution plan and saves it to 'planfile'.
        # Pass the public_key as a variable.
        run: terraform plan -out=planfile -var="public_key=${{ github.event.inputs.public_key }}"

      - name: Upload Planfile
        uses: actions/upload-artifact@v4 # Uploads the generated planfile as a workflow artifact
        with:
          name: planfile # Name of the artifact for easy identification
          path: planfile # Path is relative to the 'working-directory' ('cicdtf')

  apply:
    needs: terraform # This job will only run after the 'terraform' job completes successfully
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Runs only if manually triggered
    defaults:
      run:
        shell: bash
        working-directory: cicdtf # Must match the directory containing your .tf files

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Download Planfile
        uses: actions/download-artifact@v4 # Downloads the planfile artifact
        with:
          name: planfile
          path: cicdtf # Downloads the artifact into the 'cicdtf' directory

      # DEBUGGING STEP: List contents of the working directory after download
      - name: List working directory contents (after download)
        run: ls -la .

      - name: Terraform Apply
        # Applies the saved planfile.
        # Pass the public_key as a variable during apply as well.
        run: terraform apply -input=false planfile -var="public_key=${{ github.event.inputs.public_key }}"

  destroy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Runs only if manually triggered
    defaults:
      run:
        shell: bash
        working-directory: cicdtf # Must match the directory containing your .tf files

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      # DEBUGGING STEP: List contents of the working directory
      - name: List working directory contents (inside cicdtf)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend for the destroy command.
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Destroy
        # Destroys all resources managed by the Terraform configuration.
        # Pass the public_key as a variable during destroy as well.
        run: terraform destroy --auto-approve -var="public_key=${{ github.event.inputs.public_key }}"
