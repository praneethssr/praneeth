name: Terraform CI

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      public_key:
        description: 'SSH Public Key for EC2 Key Pair'
        required: true
        type: string
  push:
    branches:
      - main # Triggers on pushes to the 'main' branch

env:
  # AWS credentials and region are set as environment variables for Terraform
  AWS_ACCESS_KEY_ID: ${{ secrets.MY_AWS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.MY_AWS_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  terraform:
    runs-on: ubuntu-latest # Specifies the runner environment
    defaults:
      run:
        shell: bash # Uses bash for all run commands in this job
        # CRITICAL FIX: Changed 'working-directory' to 'cicdtf' based on your repository structure.
        # Your Terraform files (main.tf, provider.tf, tfstate.config) are directly inside 'cicdtf'.
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository code into the runner's workspace

      # DEBUGGING STEP: Show current working directory (initial)
      # This will print the path before the 'working-directory' default takes effect for the job's steps.
      - name: Show current working directory (initial)
        run: pwd

      # DEBUGGING STEP: List repository root contents
      # This will show if the 'cicdtf' directory exists directly under your repository root.
      - name: List repository root contents
        run: ls -la ${{ github.workspace }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 # Sets up Terraform CLI on the runner
        with:
          terraform_version: 1.5.7 # Specifies the Terraform version to use

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (now 'cicdtf')
      # This step should now successfully run and show your Terraform files.
      - name: List working directory contents (inside cicdtf)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend and modules.
        # -backend-config="tfstate.config": Uses the specified file for backend configuration.
        # -migrate-state: Migrates state if the backend configuration changes (useful for initial setup).
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Validate
        # Validates the Terraform configuration files for syntax and consistency.
        run: terraform validate

      - name: Terraform Plan
        # Generates an execution plan and saves it to 'planfile'.
        # The 'planfile' will be created directly within the 'working-directory' (i.e., 'cicdtf').
        # Pass the public_key as a variable.
        run: terraform plan -out=planfile -var="public_key=${{ github.event.inputs.public_key }}"

      - name: Upload Planfile
        uses: actions/upload-artifact@v4 # Uploads the generated planfile as a workflow artifact
        with:
          name: planfile # Name of the artifact for easy identification
          # The 'path' is relative to the 'working-directory' ('cicdtf').
          # Since 'planfile' was created in 'cicdtf', we just specify 'planfile' here.
          path: planfile

  apply:
    needs: terraform # This job will only run after the 'terraform' job completes successfully
    runs-on: ubuntu-latest
    # This job is configured to run ONLY when the workflow is manually triggered (workflow_dispatch)
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        # CRITICAL FIX: Changed 'working-directory' to 'cicdtf'.
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Download Planfile
        uses: actions/download-artifact@v4 # Downloads the planfile artifact from the 'terraform' job
        with:
          name: planfile # Specifies the name of the artifact to download
          # The 'path' here is where the downloaded artifact will be placed.
          # We want it in our current 'working-directory' ('cicdtf'), so we specify 'cicdtf'.
          # This will result in the planfile being at 'your-repo/cicdtf/planfile'.
          path: cicdtf

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (e.g., 'cicdtf')
      # after the planfile has been downloaded. Verify 'planfile' is listed.
      - name: List working directory contents (after download)
        run: ls -la .

      - name: Terraform Apply
        # Applies the saved planfile.
        # -input=false: Prevents Terraform from prompting for input during apply.
        # 'planfile' is directly accessible because it's in the 'working-directory'.
        # Pass the public_key as a variable during apply as well.
        run: terraform apply -input=false planfile -var="public_key=${{ github.event.inputs.public_key }}"

  destroy:
    runs-on: ubuntu-latest
    # This job is configured to run ONLY when the workflow is manually triggered (workflow_dispatch)
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        # CRITICAL FIX: Changed 'working-directory' to 'cicdtf'.
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (now 'cicdtf')
      # Check the workflow logs for this step to verify your Terraform files are present.
      - name: List working directory contents (inside cicdtf)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend for the destroy command.
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Destroy
        # Destroys all resources managed by the Terraform configuration.
        # --auto-approve: Automatically approves the destroy operation without prompting.
        # Pass the public_key as a variable during destroy as well.
        run: terraform destroy --auto-approve -var="public_key=${{ github.event.inputs.public_key }}"
        
