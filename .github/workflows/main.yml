name: Terraform CI

on:
  # Allows you to run this workflow manually from the Actions tab in GitHub
  # The 'public_key' input is still available if you need to manually trigger for specific scenarios.
  workflow_dispatch:
    inputs:
      public_key:
        description: 'SSH Public Key for EC2 Key Pair (e.g., ssh-rsa AAAA...)'
        required: true
        type: string

  # This will now trigger both the 'terraform' (plan) and 'apply' jobs on every push to the main branch.
  push:
    branches:
      - main

env:
  # AWS credentials are loaded from GitHub Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  # This job will perform Terraform initialization, validation, and planning.
  # It runs on both 'push' and 'workflow_dispatch' events.
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # Assuming your Terraform files are in a subdirectory named 'cicdtf'
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Show current working directory (initial)
        run: pwd

      - name: List repository root contents
        run: ls -la ${{ github.workspace }}

      - name: Verify AWS Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:+set}"
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:+set}"
          echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:+set}"
          # Exit if AWS credentials are not set, as they are required for Terraform
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::Missing AWS credentials."
            exit 1
          fi

      - name: Setup Terraform
        # Uses the official HashiCorp action to set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7 # Specify the exact Terraform version you need

      - name: List working directory contents (inside cicdtf)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform, configuring the backend for state management
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Validate
        # Validates the Terraform configuration files
        run: terraform validate

      - name: Terraform Plan
        # Generates an execution plan and saves it to 'planfile'
        # The 'public_key' input from workflow_dispatch is passed as a variable
        run: terraform plan -out=planfile -var="public_key=${{ github.event.inputs.public_key }}"

      - name: Upload Planfile
        # Uploads the generated planfile as an artifact, to be used by the 'apply' job
        uses: actions/upload-artifact@v4
        # Only upload if the plan step was successful
        if: success()
        with:
          name: planfile-${{ github.run_id }} # Unique name for the artifact
          path: cicdtf/planfile # Path to the planfile relative to the working directory
          retention-days: 1 # Retain artifact for 1 day

  # This job will now automatically apply the Terraform plan on 'push' to 'main'
  # as well as when manually dispatched.
  apply:
    needs: terraform # Ensures 'apply' runs only after 'terraform' job completes successfully
    # The 'if' condition has been removed to allow auto-apply on push events.
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash # Explicitly set shell to bash for consistency
        working-directory: cicdtf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Download Planfile
        # Downloads the planfile artifact generated by the 'terraform' job
        uses: actions/download-artifact@v4
        with:
          name: planfile-${{ github.run_id }}
          path: cicdtf # Download to the working directory

      - name: List working directory contents (after download)
        run: ls -la .

      - name: Terraform Apply
        # Applies the infrastructure changes based on the downloaded planfile
        # The 'public_key' variable is passed again, as it might be needed for the apply operation
        run: terraform apply -input=false planfile -var="public_key=${{ github.event.inputs.public_key }}"
