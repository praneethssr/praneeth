name: Terraform CI

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main # Triggers on pushes to the 'main' branch

env:
  # AWS credentials and region are set as environment variables for Terraform
  AWS_ACCESS_KEY_ID: ${{ secrets.MY_AWS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.MY_AWS_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-south-1

jobs:
  terraform:
    runs-on: ubuntu-latest # Specifies the runner environment
    defaults:
      run:
        shell: bash # Uses bash for all run commands in this job
        # CRITICAL: This 'working-directory' MUST match your repository structure.
        # If your Terraform files are in a folder named 'infra' at the root of your repo,
        # then 'working-directory: infra' is correct.
        # If your Terraform files are directly in the root of your repo,
        # you MUST change this to 'working-directory: .' for ALL jobs.
        working-directory: infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository code into the runner's workspace

      # --- NEW DEBUGGING STEPS ---
      - name: Show current working directory (initial)
        run: pwd # Prints the current path, which should be /home/runner/work/praneeth/praneeth

      - name: List repository root contents
        # This step runs BEFORE the 'working-directory' default takes effect for the job's steps.
        # It will show if the 'infra' directory exists directly under your repository root.
        run: ls -la ${{ github.workspace }}
      # --- END NEW DEBUGGING STEPS ---

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 # Sets up Terraform CLI on the runner
        with:
          terraform_version: 1.5.7 # Specifies the Terraform version to use

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (e.g., 'infra')
      # This step will only run if the 'working-directory' itself is found.
      - name: List working directory contents (inside infra)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend and modules.
        # -backend-config="tfstate.config": Uses the specified file for backend configuration.
        # -migrate-state: Migrates state if the backend configuration changes (useful for initial setup).
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Validate
        # Validates the Terraform configuration files for syntax and consistency.
        run: terraform validate

      - name: Terraform Plan
        # Generates an execution plan and saves it to 'planfile'.
        # The 'planfile' will be created directly within the 'working-directory' (i.e., 'infra').
        run: terraform plan -out=planfile

      - name: Upload Planfile
        uses: actions/upload-artifact@v4 # Uploads the generated planfile as a workflow artifact
        with:
          name: planfile # Name of the artifact for easy identification
          # The 'path' is relative to the 'working-directory'.
          # Since 'planfile' was created in 'infra' (our working-directory),
          # we just need to specify 'planfile' here.
          path: planfile

  apply:
    needs: terraform # This job will only run after the 'terraform' job completes successfully
    runs-on: ubuntu-latest
    # This job is configured to run ONLY when the workflow is manually triggered (workflow_dispatch)
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        # CRITICAL: Ensure this 'infra' directory exists at the root of your repository.
        # If your .tf files are in the repository root, change this to '.'
        working-directory: infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Download Planfile
        uses: actions/download-artifact@v4 # Downloads the planfile artifact from the 'terraform' job
        with:
          name: planfile # Specifies the name of the artifact to download
          # The 'path' here is where the downloaded artifact will be placed.
          # We want it in our current 'working-directory' ('infra'), so we specify 'infra'.
          # This will result in the planfile being at 'your-repo/infra/planfile'.
          path: infra

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (e.g., 'infra')
      # after the planfile has been downloaded. Verify 'planfile' is listed.
      - name: List working directory contents (after download)
        run: ls -la .

      - name: Terraform Apply
        # Applies the saved planfile.
        # -input=false: Prevents Terraform from prompting for input during apply.
        # 'planfile' is directly accessible because it's in the 'working-directory'.
        run: terraform apply -input=false planfile

  destroy:
    runs-on: ubuntu-latest
    # This job is configured to run ONLY when the workflow is manually triggered (workflow_dispatch)
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        # CRITICAL: Ensure this 'infra' directory exists at the root of your repository.
        # If your .tf files are in the repository root, change this to '.'
        working-directory: infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      # DEBUGGING STEP: This will list the contents of the 'working-directory' (e.g., 'infra')
      # Check the workflow logs for this step to verify your Terraform files are present.
      - name: List working directory contents (inside infra)
        run: ls -la .

      - name: Terraform Init
        # Initializes Terraform backend for the destroy command.
        run: terraform init -backend-config="tfstate.config" -migrate-state

      - name: Terraform Destroy
        # Destroys all resources managed by the Terraform configuration.
        # --auto-approve: Automatically approves the destroy operation without prompting.
        run: terraform destroy --auto-approve
